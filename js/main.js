// js/index.js
import { getCurrentUser, logout } from "./auth.js";

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
const currentUserGlobal = getCurrentUser();
const state = {
  bmpBlob: null,
  bmpHeader: null,
  bmpData: null,
  fileName: "",
  colorMethod: "blue-green",
  imageMethod: "quadrant"
};

// –ì–æ–ª–æ–≤–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
document.addEventListener("DOMContentLoaded", () => {
  if (!checkAuth()) return;
  initSelects();
  initEventListeners();
});

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
function checkAuth() {
  const user = getCurrentUser();
  if (!user) {
    window.location.href = "index.html";
    return false;
  }

  const usernameEl = document.querySelector(".header__username");
  const exitBtn = document.querySelector(".header__exit");

  if (usernameEl) usernameEl.textContent = user.username;
  if (exitBtn) {
    exitBtn.textContent = "–í–∏–π—Ç–∏";
    exitBtn.onclick = logout;
  }

  const history = loadUserHistory(currentUserGlobal.username);
  if (history) {
    renderHistory(history);
    restoreLastUsedOptions(currentUserGlobal.username);
  }

  return true;
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ–ª–µ–∫—Ç—ñ–≤
function initSelects() {
  document.querySelectorAll(".image-processing__select").forEach(select => {
    const trigger = select.querySelector(".image-processing__select-trigger");
    const text = select.querySelector(".image-processing__select-text");
    const options = select.querySelectorAll(".image-processing__option");

    trigger.onclick = e => {
      e.stopPropagation();
      document.querySelectorAll(".image-processing__select").forEach(s => {
        if (s !== select) s.classList.remove("open");
      });
      select.classList.toggle("open");
    };

    options.forEach(option => {
      option.onclick = () => {
        const value = option.dataset.value;
        text.textContent = option.textContent;
        select.classList.remove("open");

        if (["blue-green", "red-blue", "green-red"].includes(value)) {
          state.colorMethod = value;
          saveToHistory(currentUserGlobal.username, 'lastChosenColors', value);
        } else if (["quadrant", "grid", "circle"].includes(value)) {
          state.imageMethod = value;
          saveToHistory(currentUserGlobal.username, 'lastChosenMethods', value)
        }
      };
    });
  });

  document.onclick = e => {
    document.querySelectorAll(".image-processing__select").forEach(select => {
      if (!select.contains(e.target)) select.classList.remove("open");
    });
  };
}

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø–æ selectElement —Å–µ–ª–µ–∫—Ç–∞
function setSelectByValue(selectElement, value) {
  const text = selectElement.querySelector(".image-processing__select-text");
  const options = selectElement.querySelectorAll(".image-processing__option");

  options.forEach(option => {
    if (option.dataset.value === value) {
      text.textContent = option.textContent;
      if (["blue-green", "red-blue", "green-red"].includes(value)) {
        state.colorMethod = value;
      } else if (["quadrant", "grid", "circle"].includes(value)) {
        state.imageMethod = value;
      }
    }
  });
}

// –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –≤–∏–±—Ä–∞–Ω–∏—Ö —Å–µ–ª–µ–∫—Ç—ñ–≤
function restoreLastUsedOptions(username) {
  const lastColors = loadUserHistoryByKey(username, "lastChosenColors") || [];
  const lastMethods = loadUserHistoryByKey(username, "lastChosenMethods") || [];
  const lastFiles = loadUserHistoryByKey(username, "bmpFiles") || [];

  const lastColor = lastColors[0] || null;
  const lastMethod = lastMethods[0] || null;

  const colorSelect = document.querySelector(".image-processing__color-select");
  const methodSelect = document.querySelector(".image-processing__method-select");

  if (lastColor && colorSelect) {
    setSelectByValue(colorSelect, lastColor);
  }

  if (lastMethod && methodSelect) {
    setSelectByValue(methodSelect, lastMethod);
  }

  if (lastMethod || lastColor) {
    alert(`üîÅ –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –≤–∏ –æ–±—Ä–∞–ª–∏ —Ç–æ–π —Å–∞–º–∏–π —Ñ–∞–π–ª BMP: ${lastFiles[0]}`);
  }
}


// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
function initEventListeners() {
  const fileInput = document.getElementById("fileInput");
  const hideBtn = document.querySelector(".steganography__input-btn");
  const extractBtn = document.querySelector(".steganography__output-btn");
  const createBtn = document.querySelector(".image-processing__process-btn");

  if (fileInput) fileInput.onchange = handleFileUpload;
  if (hideBtn) hideBtn.onclick = handleHideMessage;
  if (extractBtn) extractBtn.onclick = handleExtractMessage;
  if (createBtn) createBtn.onclick = handleCreateImage;
  document.querySelector('.footer__how-to-use').addEventListener('click', () => {
    alert(`–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
    1. –í–∏–±–µ—Ä—ñ—Ç—å BMP-—Ñ–∞–π–ª (24-–±—ñ—Ç–Ω–∏–π) —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω–∏–π –¥—ñ–∞–ª–æ–≥.
    2. –û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ 3 —Å–ø–æ—Å–æ–±—ñ–≤ –ø–æ–±—É–¥–æ–≤–∏ –Ω–æ–≤–æ–≥–æ BMP-—Ñ–∞–π–ª—É.
    3. –û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ 3 –∫–æ–ª—å–æ—Ä–æ–≤–∏—Ö –∫–æ–º–±—ñ–Ω–∞—Ü—ñ–π.
    4. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–°—Ç–≤–æ—Ä–∏—Ç–∏", —â–æ–± –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–π BMP-—Ñ–∞–π–ª, —è–∫–∏–π –±—É–¥–µ –±–∞–∑—É–≤–∞—Ç–∏—Å—å –Ω–∞ —Ä–æ–∑–º—ñ—Ä–∞—Ö –≤–∏–±—Ä–∞–Ω–æ–≥–æ.
    5. –í–∏ –º–æ–∂–µ—Ç–µ –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–≤–∏–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –¥—ñ–∞–ª–æ–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.

    –î–æ–¥–∞—Ç–∫–æ–≤–æ:
    - –í–∏ –º–æ–∂–µ—Ç–µ –≤–∫–ª–∞—Å—Ç–∏ –∞–±–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É BMP-—Ñ–∞–π–ª.
    - –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –æ—Ç—Ä–∏–º—É—é—Ç—å –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó: —ñ—Å—Ç–æ—Ä—ñ—é, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å, –¥–æ—Å—Ç—É–ø –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö —Ä–µ–∂–∏–º—ñ–≤.`);
  });

  document.querySelector('.footer__program-info').addEventListener('click', () => {
    alert(`–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É:

    –¶–µ–π –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –¥–æ–∑–≤–æ–ª—è—î:
    - –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤—ñ BMP-—Ñ–∞–π–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å–Ω—É—é—á–æ–≥–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ 3 —Ä—ñ–∑–Ω—ñ –∞–ª–≥–æ—Ä–∏—Ç–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–ª—å–æ—Ä—ñ–≤.
    - –í–∏–±–∏—Ä–∞—Ç–∏ –∫–æ–ª—ñ—Ä–Ω—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
    - –í—à–∏–≤–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É BMP-—Ñ–∞–π–ª (—Å—Ç–µ–≥–∞–Ω–æ–≥—Ä–∞—Ñ—ñ—è).
    - –ó—á–∏—Ç—É–≤–∞—Ç–∏ –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ BMP-—Ñ–∞–π–ª—ñ–≤.

    –¢–∞–∫–æ–∂ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, —è–∫–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î:
    - –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –Ω–∞–∑–≤ —Ñ–∞–π–ª—ñ–≤, —Ä–µ–∂–∏–º—ñ–≤ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å. 
    - –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø—ñ—Å–ª—è –≤—Ö–æ–¥—É.
    - –ú–æ–∂–ª–∏–≤—ñ—Å—Ç—å —à–≤–∏–¥–∫–æ–≥–æ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º—ñ–∂ –æ—Å—Ç–∞–Ω–Ω—ñ–º–∏ —Ä–µ–∂–∏–º–∞–º–∏.`);
  });

  document.querySelector('.footer__authors').addEventListener('click', () => {
    alert(`–ê–≤—Ç–æ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–∏:

    –¶–µ–π –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—î–∫—Ç—É.

    –ö–æ–º–∞–Ω–¥–∞ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤:
    - –°–∏–≥—ñ–ª—å –°. –ó.
    - –ñ–µ–ª—ñ—Ö–æ–≤—Å—å–∫–∞ –¢. –Æ.
    - –û–ª–µ–∫—Å—é–∫ –ê. –Ü. 

    `);
  });
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
function displayImage(blob, selector, alt, caption = "") {
  const container = document.querySelector(selector);
  if (!container) return;

  const url = URL.createObjectURL(blob);

  container.style.cssText = "display: flex; align-items: center; justify-content: center;";
  container.innerHTML = `
    <div>
      <img src="${url}" alt="${alt}" style="max-width: 550px; max-height: 400px;" />
    </div>
  `;
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
async function handleFileUpload(event) {
  const file = event.target.files[0];
  if (!file?.name.toLowerCase().endsWith(".bmp")) {
    alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç—É BMP");
    return;
  }

  state.fileName = file.name;
  state.bmpBlob = file;

  if (await parseBMP(file)) {
    displayImage(file, ".image-processing__placeholder", "BMP Preview");
    saveToHistory(currentUserGlobal.username, "bmpFiles", state.fileName);
    const history = loadUserHistory(currentUserGlobal.username);
    if (history) {
      renderHistory(history);
    }
  } else {
    alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ BMP —Ñ–∞–π–ª—É");
  }
}

// –ü–∞—Ä—Å–∏–Ω–≥ BMP
async function parseBMP(blob) {
  try {
    const buffer = await blob.arrayBuffer();
    const view = new DataView(buffer);

    if (view.getUint16(0, true) !== 0x4D42) throw new Error("–ù–µ –≤–∞–ª—ñ–¥–Ω–∏–π BMP —Ñ–∞–π–ª");

    state.bmpHeader = {
      fileSize: view.getUint32(2, true),
      dataOffset: view.getUint32(10, true),
      width: view.getUint32(18, true),
      height: view.getUint32(22, true),
      bitsPerPixel: view.getUint16(28, true)
    };

    if (state.bmpHeader.bitsPerPixel !== 24) {
      alert("–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ 24-–±—ñ—Ç–Ω—ñ BMP —Ñ–∞–π–ª–∏");
      return false;
    }

    state.bmpData = new Uint8Array(buffer.slice(state.bmpHeader.dataOffset));
    return true;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É BMP:", error);
    return false;
  }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
async function handleCreateImage() {
  if (!state.bmpHeader) {
    alert("–°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ BMP —Ñ–∞–π–ª");
    return;
  }

  const imageData = generateImage();
  const blob = await createBMPBlob(imageData);

  displayImage(blob, ".image-processing__placeholder", "Processed BMP", "–û–±—Ä–æ–±–ª–µ–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è");
  downloadBlob(blob, `generated_${state.fileName}`);
  saveToHistory(currentUserGlobal.username, "modes", [state.imageMethod, state.colorMethod]);
  const history = loadUserHistory(currentUserGlobal.username);
  if (history) {
    renderHistory(history);
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
function generateImage() {
  const { width, height } = state.bmpHeader;
  const rowSize = Math.floor((24 * width + 31) / 32) * 4;
  const data = new Uint8Array(rowSize * height);

  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      const idx = y * rowSize + x * 3;
      const colors = getPixelColor(x, y, width, height);

      data[idx] = colors.b;     // BMP uses BGR
      data[idx + 1] = colors.g;
      data[idx + 2] = colors.r;
    }
  }
  return data;
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–ª—å–æ—Ä—É –ø—ñ–∫—Å–µ–ª—è
function getPixelColor(x, y, width, height) {
  const nx = x / width, ny = y / height;
  const base = getBaseColors(x, y, width, height, nx, ny);

  const colorMap = {
    "blue-green": { r: 0, g: base.primary, b: base.secondary },
    "red-blue": { r: base.primary, g: 0, b: base.secondary },
    "green-red": { r: base.secondary, g: base.primary, b: 0 }
  };

  const colors = colorMap[state.colorMethod] ||
    { r: (base.primary + base.secondary) / 2, g: (base.primary + base.secondary) / 2, b: (base.primary + base.secondary) / 2 };

  return {
    r: Math.min(255, Math.max(0, Math.floor(colors.r))),
    g: Math.min(255, Math.max(0, Math.floor(colors.g))),
    b: Math.min(255, Math.max(0, Math.floor(colors.b)))
  };
}

// –ë–∞–∑–æ–≤—ñ –∫–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –º–µ—Ç–æ–¥—ñ–≤
function getBaseColors(x, y, width, height, nx, ny) {
  const methods = {
    quadrant: () => {
      const hw = width / 2, hh = height / 2;
      return {
        primary: Math.floor(((x >= hw) ? (1 - nx) : nx) * 255),
        secondary: Math.floor(((y >= hh) ? (1 - ny) : ny) * 255)
      };
    },
grid: () => {
  const gridSize = Math.max(8, Math.floor(Math.min(width, height) / 16)); // –†–æ–∑–º—ñ—Ä –∫–ª—ñ—Ç–∏–Ω–∫–∏ —Å—ñ—Ç–∫–∏
  const lineWidth = Math.max(1, Math.floor(gridSize / 8)); // –¢–æ–≤—â–∏–Ω–∞ –ª—ñ–Ω—ñ–π —Å—ñ—Ç–∫–∏
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—è –Ω–∞ –ª—ñ–Ω—ñ—ó —Å—ñ—Ç–∫–∏ (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ñ–π –∞–±–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ñ–π)
  const isOnVerticalLine = (x % gridSize) < lineWidth;
  const isOnHorizontalLine = (y % gridSize) < lineWidth;
  const isOnGridLine = isOnVerticalLine || isOnHorizontalLine;
  
  if (isOnGridLine) {
    // –õ—ñ–Ω—ñ—ó —Å—ñ—Ç–∫–∏ - —Ç–µ–º–Ω–∏–π –∫–æ–ª—ñ—Ä
    return { primary: 50, secondary: 50 };
  } else {
    // –ö–ª—ñ—Ç–∏–Ω–∫–∏ —Å—ñ—Ç–∫–∏ - —Å–≤—ñ—Ç–ª–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó
    const cellX = Math.floor(x / gridSize);
    const cellY = Math.floor(y / gridSize);
    const cellPattern = (cellX + cellY) % 2; // –®–∞—Ö–º–∞—Ç–Ω–∏–π –ø–∞—Ç–µ—Ä–Ω –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
    
    return cellPattern === 0 ?
      { primary: Math.floor(180 + nx * 75), secondary: Math.floor(180 + ny * 75) } : //—è–∫—â–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–∞—Ä–Ω–∞
      { primary: Math.floor(150 + (1-nx) * 75), secondary: Math.floor(150 + (1-ny) * 75) }; //–Ω–µ–ø–∞—Ä–Ω–∞
  }
},
    circle: () => {
      const cx = width / 2, cy = height / 2;
      const maxR = Math.sqrt(cx * cx + cy * cy);
      const dist = Math.min(1, Math.sqrt((x - cx) ** 2 + (y - cy) ** 2) / maxR);
      return { primary: Math.floor((1 - dist) * 255), secondary: Math.floor(dist * 255) };
    }
  };

  return methods[state.imageMethod]() || { primary: Math.floor(nx * 255), secondary: Math.floor(ny * 255) };
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è BMP Blob
async function createBMPBlob(imageData) {
  const buffer = await state.bmpBlob.arrayBuffer();
  return new Blob([buffer.slice(0, state.bmpHeader.dataOffset), imageData], { type: "image/bmp" });
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
function downloadBlob(blob, filename) {
  const url = URL.createObjectURL(blob);
  const a = Object.assign(document.createElement("a"), { href: url, download: filename });
  a.click();
  URL.revokeObjectURL(url);
}

// –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function hideMessage(message, imageData) {
  const msgBytes = new TextEncoder().encode(message);
  const msgWithTerm = new Uint8Array(msgBytes.length + 1);
  msgWithTerm.set(msgBytes);

  if (msgWithTerm.length * 8 > imageData.length) {
    throw new Error(`–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ. –ü–æ—Ç—Ä—ñ–±–Ω–æ ${msgWithTerm.length * 8} –±—ñ—Ç—ñ–≤, –¥–æ—Å—Ç—É–ø–Ω–æ ${imageData.length}`);
  }

  const result = new Uint8Array(imageData);
  let bitIdx = 0;

  for (let i = 0; i < msgWithTerm.length; i++) {
    for (let bit = 0; bit < 8; bit++) {
      const msgBit = (msgWithTerm[i] >> bit) & 1;
      result[bitIdx] = (result[bitIdx] & 0xfe) | msgBit;
      bitIdx++;
    }
  }
  return result;
}

// –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async function extractMessage(blob) {
  try {
    const buffer = await blob.arrayBuffer();
    const view = new DataView(buffer);
    const data = new Uint8Array(buffer.slice(view.getUint32(10, true)));

    const bytes = [];
    let bitIdx = 0;

    while (bitIdx < data.length - 7 && bytes.length < 500) {
      let byte = 0;
      for (let bit = 0; bit < 8; bit++) {
        byte |= (data[bitIdx] & 1) << bit;
        bitIdx++;
      }
      if (byte === 0) break;
      bytes.push(byte);
    }

    if (bytes.length === 0) return null;

    const nonPrintable = bytes.filter(b => b < 32 && ![9, 10, 13].includes(b)).length;
    if (nonPrintable > bytes.length * 0.3) return null;

    return new TextDecoder().decode(new Uint8Array(bytes)).trim() || null;
  } catch {
    return null;
  }
}

// –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è
async function handleHideMessage() {
  const message = document.querySelector(".steganography__input").value.trim();
  if (!message) return alert("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è");
  if (!state.bmpData) return alert("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ BMP —Ñ–∞–π–ª");

  try {
    const modifiedData = hideMessage(message, state.bmpData);
    const blob = await createBMPBlob(modifiedData);
    downloadBlob(blob, `hidden_message_${state.fileName}`);
    alert("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ!");
    saveToHistory(currentUserGlobal.username, "embeddedMessages", message);
    const history = loadUserHistory(currentUserGlobal.username);
    if (history) {
      renderHistory(history);
    }
  } catch (error) {
    alert("–ü–æ–º–∏–ª–∫–∞: " + error.message);
  }
}

// –û–±—Ä–æ–±–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è
async function handleExtractMessage() {
  if (!state.bmpBlob) return alert("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ BMP —Ñ–∞–π–ª");

  try {
    const message = await extractMessage(state.bmpBlob);
    const output = document.querySelector(".steganography__output-placeholder");

    if (output) {
      saveToHistory(currentUserGlobal.username, "extractedMessages", message);
      const history = loadUserHistory(currentUserGlobal.username);
      if (history) {
        renderHistory(history);
      }
      output.style.cssText = "display: flex; align-items: left; justify-content: left; padding: 20px;";
      output.innerHTML = message ?
        `<p>${message}</p>` :
        "<p>–ü—Ä–∏—Ö–æ–≤–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</p>";
    }
  } catch (error) {
    alert("–ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è: " + error.message);
  }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –ø–æ –∫–ª—é—á—É key
function saveToHistory(username, key, entry) {
  const raw = localStorage.getItem("userHistories") || "{}";
  const histories = JSON.parse(raw);

  if (!histories[username]) {
    histories[username] = { history: { bmpFiles: [], modes: [], embeddedMessages: [], extractedMessages: [], lastChosenColors: [], lastChosenMethods: [] } };
  }

  const list = histories[username].history[key];

  list.unshift(entry);
  if (list.length > 3) list.pop();

  localStorage.setItem("userHistories", JSON.stringify(histories));
}

// –í–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function loadUserHistory(username) {
  const raw = localStorage.getItem("userHistories") || "{}";
  const histories = JSON.parse(raw);
  return histories[username]?.history || null;
}

// –í–∏—Ç—è–≥–Ω–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –∫–ª—é—á–µ–º key
function loadUserHistoryByKey(username, key) {
  const raw = localStorage.getItem("userHistories") || "{}";
  const histories = JSON.parse(raw);
  return histories[username]?.history[key] || null;
}

// –†–µ–Ω–¥–µ—Ä —ñ –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è onclick —Ñ—É–Ω–∫—Ü—ñ–π –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—ó
function renderHistory(history) {
  const lastFiles = document.querySelector(".history__last-files");
  const lastPatterns = document.querySelector(".history__last-patterns");
  const lastMessages = document.querySelector(".history__last-messages");

  lastFiles.innerHTML = history.bmpFiles
    .map(name => `<div class="history__entry" data-filename="${name}">${name}</div>`)
    .join("");

  lastPatterns.innerHTML = history.modes
    .map(mode => `<div class="history__entry">${mode}</div>`)
    .join("");

  lastMessages.innerHTML = [
    ...history.embeddedMessages.map(msg => `<div class="history__entry">[–ü—Ä–∏—Ö–æ–≤–∞–Ω–µ] ${msg}</div>`),
    ...history.extractedMessages.map(msg => `<div class="history__entry">[–í–∏—Ç—è–≥–Ω—É—Ç–µ] ${msg}</div>`)
  ]
    .slice(0, 3)
    .join("");

  lastFiles.querySelectorAll(".history__entry").forEach(entry => {
    entry.addEventListener("click", () => {
      const triggeredFileName = entry.dataset.filename;

      if (state.fileName !== triggeredFileName) {
        alert(`–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, –±—É–¥—å –ª–∞—Å–∫–∞, –≤—Ä—É—á–Ω—É –æ–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª ${triggeredFileName}, —è–∫–∏–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤—Å—è —Ä–∞–Ω—ñ—à–µ.`);
      }
    });
  });

  lastPatterns.querySelectorAll(".history__entry").forEach(entry => {
    entry.addEventListener("click", () => {
      const value = entry.textContent.split(',');
      const color = value[1] || null;
      const method = value[0] || null;

      const colorSelect = document.querySelector(".image-processing__color-select");
      const methodSelect = document.querySelector(".image-processing__method-select");

      saveToHistory(currentUserGlobal.username, 'lastChosenColors', color);
      saveToHistory(currentUserGlobal.username, 'lastChosenMethods', method);

      if (color && colorSelect) {
        setSelectByValue(colorSelect, color);
      }

      if (method && methodSelect) {
        setSelectByValue(methodSelect, method);
      }
    });
  });

  lastMessages.querySelectorAll(".history__entry").forEach(entry => {
    entry.addEventListener("click", () => {
      const message = entry.textContent.split(' ');
      const output = document.querySelector(".steganography__output-placeholder");
      const input = document.querySelector(".steganography__input");

      if (message[0] === '[–ü—Ä–∏—Ö–æ–≤–∞–Ω–µ]' && output) {
        output.style.cssText = "display: flex; align-items: left; justify-content: left; padding: 20px;";
        output.innerHTML = `<p>${message[1]}</p>`;
      } else if (message[0] === '[–í–∏—Ç—è–≥–Ω—É—Ç–µ]' && input) {
        input.value = message[1];
      }
    });
  });
}

window.logout = logout;
